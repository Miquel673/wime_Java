document.addEventListener("DOMContentLoaded", () => {
  // üß† Obtener el ID del usuario logueado desde sessionStorage
  const idUsuario = sessionStorage.getItem("idUsuario");
  console.log("üß© ID del usuario logueado:", idUsuario);

  // üö® Validar si el usuario est√° logueado
  if (!idUsuario) {
    console.error("‚ùå No se encontr√≥ el ID del usuario en sessionStorage.");
    alert("No se detect√≥ sesi√≥n activa. Por favor, inicia sesi√≥n nuevamente.");
    return;
  }

  // ‚úÖ Solicitar permiso para notificaciones de escritorio
  solicitarPermisoNotificaciones();

  // üîπ Cargar las notificaciones al iniciar
  cargarNotificaciones(idUsuario);

  // üïí Verificar cada 30 segundos si hay nuevas notificaciones
  setInterval(() => verificarNuevasNotificaciones(idUsuario), 30000);

  // üü¢ Asignar eventos a los botones globales
  const btnMarcarLeidas = document.getElementById("btnMarcarLeidas");
  const btnEliminarNotificaciones = document.getElementById("btnEliminarNotificaciones");

  if (btnMarcarLeidas) {
    btnMarcarLeidas.addEventListener("click", () => marcarComoLeidas(idUsuario));
  } else {
    console.warn("‚ö†Ô∏è No se encontr√≥ el bot√≥n 'Marcar como le√≠das'");
  }

  if (btnEliminarNotificaciones) {
    btnEliminarNotificaciones.addEventListener("click", () => eliminarNotificaciones(idUsuario));
  } else {
    console.warn("‚ö†Ô∏è No se encontr√≥ el bot√≥n 'Eliminar notificaciones'");
  }
});


// üîπ Cargar notificaciones del usuario
async function cargarNotificaciones(idUsuario) {
  try {
    const response = await fetch(`http://localhost:8080/api/notificaciones/${idUsuario}`);
    if (!response.ok) throw new Error("Error al obtener notificaciones");

    const notificaciones = await response.json();
    console.log("üì© Notificaciones recibidas:", notificaciones);
    renderNotificaciones(notificaciones);
  } catch (error) {
    console.error("‚ùå Error al cargar notificaciones:", error);
  }
}


// üü¢ Marcar todas como le√≠das
async function marcarComoLeidas(idUsuario) {
  try {
    const response = await fetch(`http://localhost:8080/api/notificaciones/${idUsuario}/marcar-leidas`, {
      method: "PUT",
    });

    if (!response.ok) throw new Error("Error al marcar como le√≠das");
    console.log("‚úÖ Notificaciones marcadas como le√≠das");
    cargarNotificaciones(idUsuario);
  } catch (error) {
    console.error("‚ùå Error al marcar como le√≠das:", error);
  }
}


// üî¥ Eliminar todas las notificaciones
async function eliminarNotificaciones(idUsuario) {
  if (!confirm("¬øSeguro que quieres eliminar todas las notificaciones?")) return;

  try {
    const response = await fetch(`http://localhost:8080/api/notificaciones/${idUsuario}/eliminar-todas`, {
      method: "DELETE",
    });

    if (!response.ok) throw new Error("Error al eliminar notificaciones");
    console.log("üóëÔ∏è Notificaciones eliminadas correctamente");
    cargarNotificaciones(idUsuario);
  } catch (error) {
    console.error("‚ùå Error al eliminar notificaciones:", error);
  }
}


// üß© Renderizar las notificaciones en pantalla
function renderNotificaciones(notificaciones) {
  const contenedor = document.getElementById("listaNotificaciones");
  contenedor.innerHTML = "";

  if (!notificaciones || notificaciones.length === 0) {
    contenedor.innerHTML = "<p>No tienes notificaciones.</p>";
    return;
  }

  // üîπ Ordenar las notificaciones por fecha (m√°s recientes primero)
  notificaciones.sort((a, b) => new Date(b.fecha) - new Date(a.fecha));

  // üîπ Crear los elementos visuales
  notificaciones.forEach(n => {
    const item = document.createElement("div");
    item.classList.add("notificacion");

    item.innerHTML = `
      <strong>${n.tipo}</strong>
      <p>${n.mensaje}</p>
      <small>${new Date(n.fecha).toLocaleString()}</small>
      <p style="color:${n.leida ? "green" : "red"};">
        ${n.leida ? "Le√≠da" : "No le√≠da"}
      </p>
      <hr>
    `;

    contenedor.appendChild(item);
  });
}



// üü¢ Pedir permiso de notificaci√≥n al navegador
function solicitarPermisoNotificaciones() {
  if (!("Notification" in window)) {
    console.warn("‚ö†Ô∏è El navegador no soporta notificaciones de escritorio");
    return;
  }

  if (Notification.permission === "default") {
    Notification.requestPermission().then((permiso) => {
      if (permiso === "granted") {
        console.log("‚úÖ Permiso de notificaciones concedido");
      } else {
        console.warn("üö´ Permiso de notificaciones denegado");
      }
    });
  }
}


// üîî Mostrar una notificaci√≥n de escritorio
function mostrarNotificacion(titulo, mensaje) {
  if (Notification.permission === "granted") {
    const opciones = {
      body: mensaje,
      icon: "/IMG/logo.png", // Cambia por el icono de tu proyecto
      vibrate: [200, 100, 200],
      tag: "wime-notif",
    };

    new Notification(titulo, opciones);
  }
}


// üîç Verificar nuevas notificaciones
async function verificarNuevasNotificaciones(idUsuario) {
  try {
    const resp = await fetch(`http://localhost:8080/api/notificaciones/${idUsuario}`);
    if (!resp.ok) throw new Error("Error al obtener nuevas notificaciones");

    const notificaciones = await resp.json();

    // Solo mostrar las no le√≠das
    notificaciones.forEach((n) => {
      if (!n.leida) {
        mostrarNotificacion(n.tipo, n.mensaje);
      }
    });
  } catch (error) {
    console.error("‚ùå Error verificando nuevas notificaciones:", error);
  }
}
